@using HW1c.Models;
@model LibViewModel

@{
    ViewBag.Title = "PhotoFail";
}
<br />
<br />
<br />
<br />
<div class="row">
    <div class="col-1">
        <br />
    </div>
    <div class="col">
        <h1>Photo library</h1>
        <br />
        <div class="row">
            <div class="col-4 text-left">
                Select a photo ID to view details.
                <br /> Click photo thumbnail to preview photo.
            </div>
            <div class="col-2 text-right">
                <div class="dropdown1">
                    <button class="photoDropBtn"><i class="fa fa-filter"></i>Filter</button>
                    <div class="dropdown-content1">
                        <a href="#" onclick="location.href='@Url.Action("PhotoPass","Home")'">Pass</a>
                        <a href="#" onclick="location.href='@Url.Action("PhotoFail","Home")'">Fail</a>
                        <a href="#" onclick="location.href='@Url.Action("Library","Home")'">All</a>
                    </div>
                </div>
            </div>
            <div class="col-2 text-right">
                <button class="downloadTable"><i class="fa fa-download"></i> Download</button>
            </div>
        </div>

        <script>
            function photoPreview(photoFile) {
                document.getElementById("showPhoto").innerHTML = "<img id='myimage' src= " + photoFile + " width = 300 height = 350/>";
                $('#maglass').show();
            }

            function magnify(imgID, zoom) {
                var img, glass, w, h, bw;
                img = document.getElementById(imgID);
                /*create magnifier glass:*/
                glass = document.createElement("DIV");
                glass.setAttribute("class", "img-magnifier-glass");
                /*insert magnifier glass:*/
                img.parentElement.insertBefore(glass, img);
                /*set background properties for the magnifier glass:*/
                glass.style.backgroundImage = "url('" + img.src + "')";
                glass.style.backgroundRepeat = "no-repeat";
                glass.style.backgroundSize = (img.width * zoom) + "px " + (img.height * zoom) + "px";
                bw = 3;
                w = glass.offsetWidth / 2;
                h = glass.offsetHeight / 2;
                /*execute a function when someone moves the magnifier glass over the image:*/
                glass.addEventListener("mousemove", moveMagnifier);
                img.addEventListener("mousemove", moveMagnifier);
                /*and also for touch screens:*/
                glass.addEventListener("touchmove", moveMagnifier);
                img.addEventListener("touchmove", moveMagnifier);
                function moveMagnifier(e) {
                    var pos, x, y;
                    /*prevent any other actions that may occur when moving over the image*/
                    e.preventDefault();
                    /*get the cursor's x and y positions:*/
                    pos = getCursorPos(e);
                    x = pos.x;
                    y = pos.y;
                    /*prevent the magnifier glass from being positioned outside the image:*/
                    if (x > img.width - (w / zoom)) { x = img.width - (w / zoom); }
                    if (x < w / zoom) { x = w / zoom; }
                    if (y > img.height - (h / zoom)) { y = img.height - (h / zoom); }
                    if (y < h / zoom) { y = h / zoom; }
                    /*set the position of the magnifier glass:*/
                    glass.style.left = (x - w) + "px";
                    glass.style.top = (y - h) + "px";
                    /*display what the magnifier glass "sees":*/
                    glass.style.backgroundPosition = "-" + ((x * zoom) - w + bw) + "px -" + ((y * zoom) - h + bw) + "px";
                }
                function getCursorPos(e) {
                    var a, x = 0, y = 0;
                    e = e || window.event;
                    /*get the x and y positions of the image:*/
                    a = img.getBoundingClientRect();
                    /*calculate the cursor's x and y coordinates, relative to the image:*/
                    x = e.pageX - a.left;
                    y = e.pageY - a.top;
                    /*consider any page scrolling:*/
                    x = x - window.pageXOffset;
                    y = y - window.pageYOffset;
                    return { x: x, y: y };
                }
            }
        </script>

        <style type="text/css">
            .imgThumbnail {
                cursor: pointer;
            }

                .imgThumbnail:hover {
                    -moz-box-shadow: 0 0 10px #ccc;
                    -webkit-box-shadow: 0 0 10px #ccc;
                    box-shadow: 0 0 10px #ccc;
                }
        </style>
        <style>
            /* Style The Dropdown Button */
            .photoDropBtn {
                border: 2px solid black;
                background-color: white;
                color: darkseagreen;
                padding: 6px 33px;
                font-size: 14px;
                border-color: darkseagreen;
                cursor: pointer;
                border-radius: 5px;
            }

            /* The container <div> - needed to position the dropdown content */
            .dropdown1 {
                position: relative;
                display: inline-block;
            }

            /* Dropdown Content (Hidden by Default) */
            .dropdown-content1 {
                display: none;
                position: absolute;
                background-color: #f9f9f9;
                min-width: 100px;
                box-shadow: 0px 8px 16px 0px rgba(0,0,0,0.2);
                z-index: 1;
            }

                /* Links inside the dropdown */
                .dropdown-content1 a {
                    color: black;
                    padding: 6px 33px;
                    text-decoration: none;
                    display: block;
                }

                    /* Change color of dropdown links on hover */
                    .dropdown-content1 a:hover {
                        background-color: #f1f1f1
                    }

            /* Show the dropdown menu on hover */
            .dropdown1:hover .dropdown-content1 {
                display: block;
            }

            /* Change the background color of the dropdown button when the dropdown content is shown */
            .dropdown1:hover .photoDropBtn {
                color: white;
                background-color: seagreen;
            }


            /* Download button */
            .downloadTable {
                background-color: royalblue;
                border: none;
                color: white;
                padding: 8px 18px;
                cursor: pointer;
                font-size: 14px;
                border-radius: 5px;
            }

            .my-custom-scrollbar {
                position: relative;
                height: 400px;
                overflow: auto;
            }

            .table-wrapper-scroll-y {
                display: block;
            }

            .libhead th {
                font-size: 18px;
                color: #fff;
                line-height: 1.4;
                background-color: darkseagreen;
            }
        </style>
        <br />
        <div class="row text-center">
            <br />
            <div class="col-8 text-left">
                <div class="table-wrapper-scroll-y my-custom-scrollbar">
                    <table class="table table-striped">
                        <thead class="libhead">
                            <tr>
                                <th scope="col">PhotoID</th>
                                <th scope="col">Photo Thumbnail</th>
                                <th scope="col">Value</th>
                                <th scope="col">Location</th>
                                <th scope="col">Date</th>

                            </tr>
                        </thead>
                        <tbody>
                            @{
                                foreach (var item in Model.PhotoViewModel.PhotoList)
                                {
                                    <tr>
                                        <td>@Html.ActionLink(item.PhotoID, "ReadFail", new { id = item.PhotoID }, new { @class = "small" })</td>
                                        <td onclick="photoPreview('/Content/Img/' + '@item.PhotoFile')">
                                            <img src="~/Content/Img/@item.PhotoFile" width="30" height="30" class="imgThumbnail">
                                        </td>
                                        <td>@item.Value</td>
                                        <td>@item.Location</td>
                                        <td>@item.RecordedDateTime.ToShortDateString()</td>
                                    </tr>
                                }
                            }
                        </tbody>
                    </table>
                </div>
            </div>
            <div class="col-4">
                <div id="showPhoto" class="row text-center">
                </div>
                <button class="btn btn-primary btn-lg" id="maglass" style="display:none" onclick='magnify("myimage", 3)'><i class="fa fa-search"></i></button>
            </div>
        </div>
    </div>
</div>